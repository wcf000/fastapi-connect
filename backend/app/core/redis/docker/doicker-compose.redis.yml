# docker-compose.redis.yml
version: '3.8'

services:
  redis:
    image: redis:7.0-alpine # Pinned version
    container_name: redis
    restart: unless-stopped
    ports:
      # Expose Redis port to the host
      - "${REDIS_PORT:-6379}:${REDIS_PORT:-6379}"
    volumes:
      # Persist Redis data
      - redis-data:/data
    command: >
      redis-server --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis_password} # Use secrets in production
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --port ${REDIS_PORT:-6379}
      --databases ${REDIS_DATABASES:-16}
    networks:
      - app-network # For redis-exporter and other app components (backend, celery)
    healthcheck:
      # Test connectivity using redis-cli, include password if required
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 20s
      timeout: 5s
      retries: 5

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0 # Pinned version
    container_name: redis-exporter
    restart: unless-stopped
    environment:
      # Point to the redis service using its service name on the shared network
      # Use secrets for REDIS_PASSWORD in production
      - REDIS_ADDR=redis://redis:${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
    ports:
      # Expose the metrics endpoint for Prometheus scraping
      - "9121:9121"
    networks:
      - app-network # Needs to reach redis, needs to be reachable by prometheus
    depends_on:
      # Ensures redis container is started, ideally wait for healthy
      redis:
        condition: service_started # Use service_healthy if healthcheck is reliable

networks:
  app-network:
    external: true # Assume this network is created elsewhere

volumes:
  redis-data:
    # Define the volume used by the redis service